<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Course</title>
    <link rel="stylesheet" href="../css/style.css">
    <%- include ('../partials/partial') %>

    <style>
     body{
        background-color:whitesmoke;
        padding:0;
        margin:0;  
      }  
       #uploadOptions{
         background-color: white;
         width:1450px;
         padding:20px;   
         position:relative;
         top: 40px;
         font-size:18px;
         border-radius: 10px;
         left:20px;
        }
        #uploadViaExcel{
          margin-bottom: 20px;       
        }
        #uploadMessage{
         height: 50px;
         border-radius:22px;
         justify-content:center;
         display:flex;
         align-items:center;
         color: red;
         box-shadow:0px 0px 6px 1px red;
         width:93%;
         font-weight:bold;
         margin-left:20px;
         visibility:hidden; 
        }
        #uploadFormat{
         position:relative;
         top:100px;  
         background-color: white;
         padding:30px;
         border-radius:10px;
         left:20px;
         width:93%;
        }
        #fileName{
          margin-top: 20px;
          margin-bottom: 10px;
        }
        #excelHeading{
          margin-top:20px;
          margin-bottom:20px;
        }
        #excelCourseSubmit , #excelCancel{
          margin-top:20px;
          margin-bottom:20px;
        }
        #closeBt{
          color:red;
          background-color: whitesmoke;
          border:0;
          position: relative; 
          left:38%;    
        }
        #closeBt:focus{
         outline:none;
        }
        #viewAllCourse{
          margin-top: 150px;
          text-align: center;
          margin-left: 20px;
        }
        tr:nth-child(odd){
          background-color:  #e6f7ff; 
        }
        tr:nth-child(even){
          background-color:  white;
        }
        th{
          background-color: #e6f7ff;
        }
        span{
          color:red;
        }
    </style>
</head>
<body>
    <%- include('sidebar.ejs') %>
    <%- include('header.ejs')  %>
    <div id="main">
       
    <div id="uploadMessage"></div>  
     
    <div id= "uploadOptions" >
    <h3>Upload Course</h3>
    <hr/>
    <input type="radio" name="uploadCourse" id="uploadViaExcel" checked /> Upload Via Excel</br>
    <input type="radio" name="uploadCourse" id="uploadViaManually" /> Upload Via Manually</br>
    </div>
        
    <div id="uploadFormat">
   
    </div>
    <div id="viewAllCourse">

    </div>

    </div> 
</body>
<%- include ('../partials/partial2') %>
<script src= "../js/script.js" ></script>
<script>

defaultCourseDisplay();
showAllCourses();

function showAllCourses(){
  getAllCourses('/elective/getAllCourses','GET')
  .then(response => {
    console.log("Response::::: " , response);
    if(response.status === 'error'){
    window.location.href = `${response.redirectTo}`;    
    }else{
    displayAllCourse(response);
    }
  })
}

function defaultCourseDisplay(){

let excelPage = document.getElementById('uploadFormat');

let excel = `<div id="heading"><h2>Upload Course file(Excel):</h2></div>
             <div>
             <input type="file" id='fileName' name = "CourseDetails" /></br>
             <button type="submit" class="btn btn-primary" id='excelCourseSubmit' >Upload</button>&nbsp;<button id='excelCancel' type="submit" class="btn btn-danger" >Cancel</button>
             </div>
             </div>
             <div id='displayNote'><a style="text-decoration:none;font-size:20px;" class="text-danger" href="/excel/Course_Excel.xlsx" id="downloadExcel"  >Download Sample Template</a></br>
             <h4 id="excelHeading">Excel Format:</h4>
             <p>Subject Name | Department Name | Campus(Optional) | No. Of Batches | Max Capacity Per Batch | Open To All Programs</p>
             </div>`;
  
excelPage.innerHTML = excel;             
  
excelDataSubmit();
cancelButton();
}

document.getElementById('uploadViaExcel').addEventListener('change',() => {

let excelPage = document.getElementById('uploadFormat');

let excel = `<div id="heading"><h2>Upload Course file(Excel):</h2></div>
             <div>
             <input type="file" id='fileName' name = "CourseDetails" /></br>
             <button type="submit" class="btn btn-primary" id='excelCourseSubmit' >Upload</button>&nbsp;<button id='excelCancel' type="submit" class="btn btn-danger" >Cancel</button>
             </div>
             </div>
             <div id='displayNote'><a style="text-decoration:none;font-size:20px;" class="text-danger" href="/excel/Course_Excel.xlsx" id="downloadExcel"  >Download Sample Template</a></br>
             <h4 id="excelHeading">Excel Format:</h4>
             <p>Subject Name | Department Name | Campus(Optional) | No. Of Batches | Max Capacity Per Batch | Open To All Programs</p>
             </div>`;
  
excelPage.innerHTML = excel;  

excelDataSubmit();
cancelButton();

});

document.getElementById('uploadViaManually').addEventListener('change',() => {

let manually = document.getElementById('uploadFormat');

let manualPage = `<div>
     <div class="form-row">
     <div class="form-group col-md-6">
      <label for="inputSubname">Course Name</label>&ensp;&ensp;<span id="SubnameError"></span>
      <input type="text" class="form-control" id="inputSubname" placeholder="Name of Subject">
     </div>
     <div class="form-group col-md-6">
      <label for="deptName">Department Name</label>&ensp;&ensp;<span id="deptError"></span>
      <input type="text" class="form-control" id="deptName" placeholder="Department Name">
     </div>
     </div>
     <div class="form-row">
     <div class="form-group col-md-6">
      <label for="inputbatch">Enter No. of Batches</label>&ensp;&ensp;<span id="batchError"></span>
      <input type="text" class="form-control" id="inputbatch" placeholder="No. of Batches">
     </div>
     <div class="form-group col-md-6">
      <label for="inputCapacity">Enter Maximum Capacity Per Batch</label>&ensp;&ensp;<span id="capacityError"></span>
      <input type="text" class="form-control" id="inputCapacity" placeholder="Maximum Capacity Per Batch">
     </div>
     </div>
     <div class="form-group">
    <label for="inputCampus">Campus</label>&ensp;&ensp;<span id="campusError"></span>
    <select id="inputCampus" class="form-control">
        <option selected>Select Campus</option>
        <% campus.forEach(data => { %>
           <option value='<%= data.campus_name %>'><%= data.campus_name %></option>
        <% }); %>
      </select>
      </select>
    </div>
    <label class="form-check-label mb-2" >Open To All Programs</label>
    <div class="form-check mb-1">
    <input class="form-check-input" type="radio" name="flexRadioDefault" id="radioTypeYes" >
    <label class="form-check-label" for="flexRadioDefault1">
    Yes
    </label>
    </div>
    <div class="form-check">
    <input class="form-check-input" type="radio" name="flexRadioDefault" id="radioTypeNo" >
    <label class="form-check-label" for="flexRadioDefault2">
     No
    </label>
    </div>
    </div>
    <button type="submit" id="submitbtn" class="btn btn-danger mt-4">Add</button>
    </div>`;

     manually.innerHTML =manualPage;

   validatePerformer();
});

function excelDataSubmit(){

document.getElementById('excelCourseSubmit').addEventListener('click', () => {

let excelFile =document.querySelector('#fileName');
let file = excelFile.files[0];

let fileName = file.name;
let getFileExtension = fileName.substring(fileName.lastIndexOf('.'),fileName.length);

let validateFile = fileError(getFileExtension);
console.log('file extension::: ' , validateFile);

if(validateFile){

let formData =new FormData();
formData.append('courseDetails',file);

insertCourseViaExcel('/elective/insertCourseViaExcel','POST',formData)
.then(response => {
if(response.status === 'error'){
  window.location.href = `${response.redirectTo}`;
}else{
  showAllCourses();
  displayMessage(response);
}
});

}else{
let message = document.getElementById('uploadMessage');
let messageDisplay = `<span>File Must Be In Excel Format Only !!</span>
<button class="fa fa-close" id="closeBt" style="font-size:24px" ></button>`;

message.innerHTML= messageDisplay ;
message.style.visibility='visible';

closeButton();    
}
});   

}

function insertCourseViaExcel(url,method,obj){

return new Promise((resolve,reject) => { 

const requestDetails = {
method:method,
body:obj,    
}   

fetch(url,requestDetails)

.then(response => {
if(response.ok){
return response.json();
}
throw new Error('Error in getting response');    
})
.then(data => {
  resolve(data);
})
.catch(error => {
  reject(error);  
})

});

}

function displayMessage(response){

let messageDisplay = document.querySelector('#uploadMessage');
messageDisplay.innerHTML = `<span id="errorMessageName">${response.message}</span>
                          <button class="fa fa-close" id="closeBt" style="font-size:24px" ></button>`;

let errorMessage = document.getElementById('errorMessageName');
let closeBt = document.getElementById('closeBt');
messageDisplay.style.visibility = 'visible';

if(response.status === 'success'){
  closeBt.style.color ='green';
  closeBt.style.left = '39%';   
  errorMessage.style.color = 'green';                        
  messageDisplay.style.boxShadow = '0px 0px 6px 1px green';  
} 

closeButton();
}

function closeButton(){

document.getElementById('closeBt').addEventListener('click', () => {
let messageDisplay = document.getElementById('uploadMessage');
messageDisplay.style.visibility='hidden'; 

});
}

function getAllCourses(url,method){

return new Promise((resolve,reject) => { 

const requestDetails = {
  method : method,
  headers:{
    'Accept': 'application/json'
  },
}  
fetch(url,requestDetails)
.then(response => {
  if(response.ok){
    return response.json();
  }
  throw new Error('Error in fetching response');
})
.then(data => {
  resolve(data);
})
.catch(error => {
  reject(error);
})

}); 
}

async function displayAllCourse(response){

let tableInput = document.getElementById('viewAllCourse');

let allCourses = await response.courseData;
let programTab = '<a href="#" ><img src="/images/plus-button.png"  data-toggle="tooltip" title = "Add Program" width="2%"/></a>';


let data =`<h5 style="float:left;padding-bottom:10px;">${allCourses.length} Records Found</h5>
           <table class="table table-bordered table-responsive-lg">
           <tr>
           <th>Sr No.</th>
           <th>Select</th>
           <th>Subject Name</th>
           <th>Campus</th>
           <th>Actions</th>
           </tr>
           <tr>
           <td></td>
           <td><input type="checkbox" /></td>
           <td></td>
           <td></td>
           <td><button class="btn btn-outline-success">Delete</button></td>
           </tr>
           ${allCourses.map((data, index) => `
           <tr>
           <td>${index + 1}</td>
           <td><input type="checkbox" /></td>
           <td>${data.subject_name }</td>
           <td>${data.campus_name }</td>
           <td>
           <a href="#" ><img src='/images/delete.png'  data-toggle='tooltip' title = 'Delete' width="1.5%"/></a>&ensp;
           <a href="#" ><img src='/images/edit.png'  data-toggle='tooltip' title = 'Edit' width="1.5%"/></a>&ensp;
           </td>
           </tr>`
           ).join('')}
           </table>` 

tableInput.innerHTML = data;

}

function validatePerformer(){

 document.getElementById('submitbtn').addEventListener('click',() => {
 
 let subjectName = document.getElementById('inputSubname').value;
 let department = document.getElementById('deptName').value;
 let batches = document.getElementById('inputbatch').value; 
 let batchCapacity = document.getElementById('inputCapacity').value;
 let campus = document.getElementById('inputCampus').value;
 let radioTypeYes = document.getElementById('radioTypeYes');
 let radioTypeNo = document.getElementById('radioTypeNo');
  
 let subjectValidate = subjectValidater(subjectName);
 let departmentValidate = departmentValidater(department);
 let batchesValidate = batchesValidator(batches);
 let batchCapacityValidate = batchCapacityValidator(batchCapacity);
 let campusValidate = campusValidator(campus);

 let radioTypeValue;
  
  if(radioTypeYes.checked){
   radioTypeValue = 'Yes';
  }
  if(radioTypeNo.checked){
  radioTypeValue = 'No';
  }

  if(subjectValidate  && departmentValidate && batchesValidate && batchCapacityValidate  && campusValidate ){
   let obj = {subjectName,department,batches,batchCapacity,campus,radioTypeValue};
   insertCourseManually('/elective/insertCourseManually','POST',obj)
   .then(response => {
    if(response.status === 'error'){
      window.location.href = `${response.redirectTo}`;
    }else{
     showAllCourses();
     displayManualMessage(response);
    }
   });
  }

 }); 
}

function subjectValidater(subject){
  let subjectError = document.getElementById('SubnameError');

  if(subject.length > 0){
   subjectError.innerText = '';
   return true;
  }else{
   subjectError.innerText = '*Required';
   return false;
  }
}

function departmentValidater(department){
  let departMentError = document.getElementById('deptError');

  if(department.length > 0){
  
  let checkAlphabets = alphabetsValidation(department);
  if(checkAlphabets){
   departMentError.innerText = '';
   return true;
  }else{
   departMentError.innerText = '*Invalid Input Field';
   return false;
  }
  }else{
  departMentError.innerText = '*Required';
  return false;
  }
}

function batchesValidator(batches){

  let batchError = document.getElementById('batchError');

  if(batches.length > 0){

  let batchValidation = NumberValidation(batches);
  console.log("batch validation :::: " , batchValidation);
  
  if(batchValidation){
  batchError.innerText = '';
  return true; 
  }else{
  batchError.innerText = '*Invalid Input Field';
  return false;
  }

  }else{
  batchError.innerText = '*Required';
  return false;
  }

}

function batchCapacityValidator(capacity){

let batchCapacityError = document.getElementById('capacityError');

if(capacity.length > 0){

let capacityValidation = NumberValidation(capacity);

if(capacityValidation){
batchCapacityError.innerText = '';
return true;  
}else{
batchCapacityError.innerText = '*Invalid Input Field';
return false;
}  

}else{
batchCapacityError.innerText = '*Required';
return false;
}
}

function campusValidator(campus){

let campusValidation = document.querySelectorAll('#inputCampus');
let campusError = document.getElementById('campusError');
let campusName = campusValidation[0][0].innerText;


if(campusName != campus){
campusError.innerText = '';  
return true; 
}else{
campusError.innerText = '*Invalid Input Field';
return false;
}

}

function insertCourseManually(url,method,obj){
return new Promise((resolve,reject) => {
  const requestDetails ={
  method:method,
  headers:{
    'Content-Type':'application/json'
  },
  body:obj ? JSON.stringify(obj) : undefined
}

fetch(url,requestDetails)
.then(response => {
  if(response.ok){
    return response.json();
  }
  throw new Error('Error in fetching response');
})
.then(data => {
 resolve(data);
})
.catch(error => {
 reject(error);
})

});
}

function displayManualMessage(response){

let messageDisplay = document.querySelector('#uploadMessage');
messageDisplay.innerHTML = `<span id="errorMessageName">${response.message}</span>
                          <button class="fa fa-close" id="closeBt" style="font-size:24px" ></button>`;

let errorMessage = document.getElementById('errorMessageName');
let closeBt = document.getElementById('closeBt');
messageDisplay.style.visibility = 'visible';

 if(response.status === 'success' && response.radioType === 'Yes'){
  closeBt.style.color ='green';
  closeBt.style.left = '39%';   
  errorMessage.style.color = 'green';                        
  messageDisplay.style.boxShadow = '0px 0px 6px 1px green'; 
 }else{
  messageDisplay.style.visibility = 'hidden';
  window.location.href = `${response.redirectTo}`;
 } 
}

function cancelButton(){
 document.getElementById('excelCancel').addEventListener('click',() => {
  cancelButtonRedirect('/elective/loginPage');
 });
}



</script>
</html>